
import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
import hashlib
import json
import datetime
import random
from tkinter import font as tkfont

class EhliyetGoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("EhliyetGo - Ehliyet Sınavı Hazırlık Uygulaması")
        self.root.geometry("1000x700")
        self.root.configure(bg='#f0f0f0')
        
        # Veritabanı bağlantısı
        self.init_database()
        
        # Kullanıcı durumu
        self.current_user = None
        self.user_level = None
        
        # Ana pencere stilleri
        self.setup_styles()
        
        # Ana menü
        self.show_main_menu()
    
    def setup_styles(self):
        """Uygulama stillerini ayarlar"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # Özel stiller
        style.configure('Title.TLabel', font=('Arial', 24, 'bold'), foreground='#2c3e50')
        style.configure('Subtitle.TLabel', font=('Arial', 14), foreground='#34495e')
        style.configure('Button.TButton', font=('Arial', 12, 'bold'), padding=10)
        style.configure('Menu.TButton', font=('Arial', 14, 'bold'), padding=15)
    
    def init_database(self):
        """Veritabanını başlatır ve gerekli tabloları oluşturur"""
        self.conn = sqlite3.connect('ehliyetgo.db')
        self.cursor = self.conn.cursor()
        
        # Kullanıcılar tablosu
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Kullanıcı seviyeleri tablosu
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_levels (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                level INTEGER DEFAULT 1,
                test_score INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        
        # Konular tablosu
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS topics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                question_count INTEGER DEFAULT 0
            )
        ''')
        
        # Sorular tablosu
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS questions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                topic_id INTEGER,
                question_text TEXT NOT NULL,
                option_a TEXT NOT NULL,
                option_b TEXT NOT NULL,
                option_c TEXT NOT NULL,
                option_d TEXT NOT NULL,
                correct_answer TEXT NOT NULL,
                difficulty INTEGER DEFAULT 1,
                FOREIGN KEY (topic_id) REFERENCES topics (id)
            )
        ''')
        
        # Test sonuçları tablosu
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS test_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                topic_id INTEGER,
                score INTEGER,
                total_questions INTEGER,
                completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (topic_id) REFERENCES topics (id)
            )
        ''')
        
        # Örnek veriler ekle
        self.insert_sample_data()
        
        self.conn.commit()
    
    def insert_sample_data(self):
        """Örnek konular ve sorular ekler"""
        # Konular
        topics = [
            ('Trafik İşaretleri', 'Trafik işaretleri ve anlamları', 20),
            ('Trafik Kuralları', 'Temel trafik kuralları', 25),
            ('Motor ve Araç Bilgisi', 'Araç teknik bilgileri', 15),
            ('İlk Yardım', 'Temel ilk yardım bilgileri', 10),
            ('Çevre Bilgisi', 'Çevre ve trafik', 10)
        ]
        
        for topic in topics:
            self.cursor.execute('''
                INSERT OR IGNORE INTO topics (name, description, question_count)
                VALUES (?, ?, ?)
            ''', topic)
        
        # Örnek sorular
        sample_questions = [
            (1, 'Aşağıdaki trafik işaretlerinden hangisi "Yol Ver" anlamındadır?', 
             'Kırmızı üçgen', 'Mavi daire', 'Sarı eşkenar dörtgen', 'Yeşil kare', 'A', 1),
            (1, 'Hangi trafik işareti "Dur" anlamındadır?',
             'Kırmızı sekizgen', 'Mavi daire', 'Sarı üçgen', 'Yeşil kare', 'A', 1),
            (2, 'Şehir içi yollarda azami hız kaç km/saat olmalıdır?',
             '30 km/saat', '50 km/saat', '70 km/saat', '90 km/saat', 'B', 1),
            (2, 'Kavşaklarda ilk geçiş hakkı hangi araçlarındır?',
             'Özel araçların', 'Toplu taşıma araçlarının', 'Acil durum araçlarının', 'Ticari araçların', 'C', 1),
            (3, 'Motor yağı hangi durumda değiştirilmelidir?',
             'Her 1000 km\'de', 'Her 5000 km\'de', 'Her 10000 km\'de', 'Her 20000 km\'de', 'C', 1),
            (3, 'Lastik hava basıncı ne zaman kontrol edilmelidir?',
             'Her gün', 'Her hafta', 'Her ay', 'Her 6 ayda', 'B', 1),
            (4, 'Kazazedenin bilinci kapalı ise ilk yapılacak işlem nedir?',
             'Kalp masajı', 'Sunni teneffüs', 'ABC kontrolü', 'Kanama durdurma', 'C', 1),
            (4, 'Hangi durumda turnike uygulanır?',
             'Her kanamada', 'Sadece atardamar kanamalarında', 'Sadece toplardamar kanamalarında', 'Hiçbir zaman', 'B', 1),
            (5, 'Egzoz gazları hangi çevre sorununa neden olur?',
             'Su kirliliği', 'Hava kirliliği', 'Toprak kirliliği', 'Gürültü kirliliği', 'B', 1),
            (5, 'Araç bakımı hangi çevre sorununu önler?',
             'Su kirliliği', 'Hava kirliliği', 'Toprak kirliliği', 'Gürültü kirliliği', 'B', 1)
        ]
        
        for question in sample_questions:
            self.cursor.execute('''
                INSERT OR IGNORE INTO questions 
                (topic_id, question_text, option_a, option_b, option_c, option_d, correct_answer, difficulty)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', question)
        
        self.conn.commit()
    
    def clear_window(self):
        """Pencereyi temizler"""
        for widget in self.root.winfo_children():
            widget.destroy()
    
    def show_main_menu(self):
        """Ana menüyü gösterir"""
        self.clear_window()

        # Başlık ve alt başlık
        title_label = tk.Label(self.root, text="EhliyetGO", font=("Arial", 36, "bold"), fg="#222", bg="#f0f0f0")
        title_label.pack(pady=(40, 0))
        subtitle_label = tk.Label(self.root, text="Teorik Ehliyet Asistanı", font=("Arial", 18), fg="#444", bg="#f0f0f0")
        subtitle_label.pack(pady=(0, 30))

        # Menü kutusu (Frame)
        menu_box = tk.Frame(self.root, bg="white", bd=0, relief="flat", highlightthickness=0)
        menu_box.pack(pady=10)
        menu_box.place(relx=0.5, rely=0.5, anchor="center", width=400, height=340)
        menu_box.configure(highlightbackground="#ddd", highlightcolor="#ddd")
        menu_box.pack_propagate(False)

        if self.current_user:
            # Kullanıcı giriş yapmış
            btn1 = tk.Button(menu_box, text="Konular", command=self.show_topics, font=("Arial", 14, "bold"), bg="#222", fg="white", relief="flat", height=2)
            btn1.pack(fill="x", padx=40, pady=(40, 10))
            btn2 = tk.Button(menu_box, text="Seviye Belirleme Testi", command=self.show_level_test, font=("Arial", 14, "bold"), bg="#222", fg="white", relief="flat", height=2)
            btn2.pack(fill="x", padx=40, pady=10)
            btn3 = tk.Button(menu_box, text="Profil", command=self.show_profile, font=("Arial", 14, "bold"), bg="#222", fg="white", relief="flat", height=2)
            btn3.pack(fill="x", padx=40, pady=10)
            btn4 = tk.Button(menu_box, text="Çıkış Yap", command=self.logout, font=("Arial", 14, "bold"), bg="#e74c3c", fg="white", relief="flat", height=2)
            btn4.pack(fill="x", padx=40, pady=(10, 0))
        else:
            # Kullanıcı giriş yapmamış
            btn1 = tk.Button(menu_box, text="Giriş Yap", command=self.show_login, font=("Arial", 14, "bold"), bg="#222", fg="white", relief="flat", height=2)
            btn1.pack(fill="x", padx=40, pady=(70, 10))
            btn2 = tk.Button(menu_box, text="Kayıt Ol", command=self.show_register, font=("Arial", 14, "bold"), bg="#222", fg="white", relief="flat", height=2)
            btn2.pack(fill="x", padx=40, pady=10)

    def show_register(self):
        """Kayıt sayfasını gösterir"""
        self.clear_window()

        # Başlık ve alt başlık
        title_label = tk.Label(self.root, text="EhliyetGO", font=("Arial", 36, "bold"), fg="#222", bg="#f0f0f0")
        title_label.pack(pady=(40, 0))
        subtitle_label = tk.Label(self.root, text="Teorik Ehliyet Asistanı", font=("Arial", 18), fg="#444", bg="#f0f0f0")
        subtitle_label.pack(pady=(0, 30))

        # Form kutusu (Frame)
        form_box = tk.Frame(self.root, bg="white", bd=0, relief="flat", highlightthickness=0)
        form_box.pack(pady=10)
        form_box.place(relx=0.5, rely=0.5, anchor="center", width=380, height=340)
        form_box.configure(highlightbackground="#ddd", highlightcolor="#ddd")
        form_box.pack_propagate(False)

        # E-posta
        email_label = tk.Label(form_box, text="Email", font=("Arial", 12), bg="white", anchor="w")
        email_label.pack(fill="x", padx=30, pady=(30, 0))
        email_entry = tk.Entry(form_box, font=("Arial", 12), bg="#f7f7f7", relief="flat", highlightthickness=1, highlightbackground="#ccc")
        email_entry.pack(fill="x", padx=30, pady=(0, 10))

        # Şifre
        password_label = tk.Label(form_box, text="Password", font=("Arial", 12), bg="white", anchor="w")
        password_label.pack(fill="x", padx=30, pady=(0, 0))
        password_entry = tk.Entry(form_box, font=("Arial", 12), show="*", bg="#f7f7f7", relief="flat", highlightthickness=1, highlightbackground="#ccc")
        password_entry.pack(fill="x", padx=30, pady=(0, 10))

        # Şifre tekrar
        password_confirm_label = tk.Label(form_box, text="Password (again)", font=("Arial", 12), bg="white", anchor="w")
        password_confirm_label.pack(fill="x", padx=30, pady=(0, 0))
        password_confirm_entry = tk.Entry(form_box, font=("Arial", 12), show="*", bg="#f7f7f7", relief="flat", highlightthickness=1, highlightbackground="#ccc")
        password_confirm_entry.pack(fill="x", padx=30, pady=(0, 20))

        # Kayıt butonu
        def register():
            email = email_entry.get().strip()
            password = password_entry.get()
            password_confirm = password_confirm_entry.get()
            if not email or not password:
                messagebox.showerror("Hata", "Tüm alanları doldurun!")
                return
            if password != password_confirm:
                messagebox.showerror("Hata", "Şifreler eşleşmiyor!")
                return
            if len(password) < 6:
                messagebox.showerror("Hata", "Şifre en az 6 karakter olmalıdır!")
                return
            hashed_password = hashlib.sha256(password.encode()).hexdigest()
            try:
                self.cursor.execute('INSERT INTO users (email, password) VALUES (?, ?)', (email, hashed_password))
                self.conn.commit()
                messagebox.showinfo("Başarılı", "Kayıt başarıyla tamamlandı!")
                self.show_login()
            except sqlite3.IntegrityError:
                messagebox.showerror("Hata", "Bu e-posta adresi zaten kullanılıyor!")

        register_btn = tk.Button(form_box, text="Sign Up", command=register, font=("Arial", 13, "bold"), bg="#222", fg="white", relief="flat", height=2)
        register_btn.pack(fill="x", padx=30, pady=(0, 10))

        # Girişe dön linki
        login_link = tk.Label(form_box, text="Already have an account? Sign In", font=("Arial", 10, "underline"), fg="#0077cc", bg="white", cursor="hand2")
        login_link.pack(pady=(0, 10))
        login_link.bind("<Button-1>", lambda e: self.show_login())

    def show_login(self):
        """Giriş sayfasını gösterir"""
        self.clear_window()

        # Başlık ve alt başlık
        title_label = tk.Label(self.root, text="EhliyetGO", font=("Arial", 36, "bold"), fg="#222", bg="#f0f0f0")
        title_label.pack(pady=(40, 0))
        subtitle_label = tk.Label(self.root, text="Teorik Ehliyet Asistanı", font=("Arial", 18), fg="#444", bg="#f0f0f0")
        subtitle_label.pack(pady=(0, 30))

        # Form kutusu (Frame)
        form_box = tk.Frame(self.root, bg="white", bd=0, relief="flat", highlightthickness=0)
        form_box.pack(pady=10)
        form_box.place(relx=0.5, rely=0.5, anchor="center", width=380, height=270)
        form_box.configure(highlightbackground="#ddd", highlightcolor="#ddd")
        form_box.pack_propagate(False)

        # E-posta
        email_label = tk.Label(form_box, text="Email", font=("Arial", 12), bg="white", anchor="w")
        email_label.pack(fill="x", padx=30, pady=(30, 0))
        email_entry = tk.Entry(form_box, font=("Arial", 12), bg="#f7f7f7", relief="flat", highlightthickness=1, highlightbackground="#ccc")
        email_entry.pack(fill="x", padx=30, pady=(0, 10))

        # Şifre
        password_label = tk.Label(form_box, text="Password", font=("Arial", 12), bg="white", anchor="w")
        password_label.pack(fill="x", padx=30, pady=(0, 0))
        password_entry = tk.Entry(form_box, font=("Arial", 12), show="*", bg="#f7f7f7", relief="flat", highlightthickness=1, highlightbackground="#ccc")
        password_entry.pack(fill="x", padx=30, pady=(0, 20))

        # Giriş butonu
        def login():
            email = email_entry.get().strip()
            password = password_entry.get()
            if not email or not password:
                messagebox.showerror("Hata", "Tüm alanları doldurun!")
                return
            hashed_password = hashlib.sha256(password.encode()).hexdigest()
            self.cursor.execute('SELECT id, email FROM users WHERE email = ? AND password = ?', (email, hashed_password))
            user = self.cursor.fetchone()
            if user:
                self.current_user = {'id': user[0], 'email': user[1]}
                messagebox.showinfo("Başarılı", f"Hoş geldiniz, {user[1]}!")
                self.show_main_menu()
            else:
                messagebox.showerror("Hata", "E-posta veya şifre hatalı!")

        login_btn = tk.Button(form_box, text="Sign In", command=login, font=("Arial", 13, "bold"), bg="#222", fg="white", relief="flat", height=2)
        login_btn.pack(fill="x", padx=30, pady=(0, 10))

        # Şifremi unuttum linki (şimdilik işlevsiz)
        forgot_link = tk.Label(form_box, text="Forgot password?", font=("Arial", 10, "underline"), fg="#0077cc", bg="white", cursor="hand2")
        forgot_link.pack(pady=(0, 10))
        # forgot_link.bind("<Button-1>", lambda e: self.show_forgot_password())

        # Kayıt ol linki
        register_link = tk.Label(form_box, text="Don't have an account? Sign Up", font=("Arial", 10, "underline"), fg="#0077cc", bg="white", cursor="hand2")
        register_link.pack(pady=(0, 10))
        register_link.bind("<Button-1>", lambda e: self.show_register())
    
    def logout(self):
        """Çıkış yapar"""
        self.current_user = None
        self.user_level = None
        self.show_main_menu()
    
    def show_topics(self):
        """Konuların listelendiği sayfayı gösterir"""
        self.clear_window()

        # Başlık ve alt başlık
        title_label = tk.Label(self.root, text="Konular", font=("Arial", 32, "bold"), fg="#222", bg="#f0f0f0")
        title_label.pack(pady=(40, 0))
        subtitle_label = tk.Label(self.root, text="Hedefine bir adım daha yaklaş! Konulardan birini seç, öğrenmeye başla.", font=("Arial", 16), fg="#444", bg="#f0f0f0")
        subtitle_label.pack(pady=(0, 30))

        # Ana çerçeve - Ortalama için relx, rely kullanıyoruz
        main_frame = tk.Frame(self.root, bg="#f0f0f0")
        main_frame.place(relx=0.5, rely=0.5, anchor="center", relwidth=0.8, relheight=0.6)

        # Canvas ve scrollbar
        canvas = tk.Canvas(main_frame, bg="#f0f0f0", highlightthickness=0)
        scrollbar = tk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        
        # Scrollable frame
        scrollable_frame = tk.Frame(canvas, bg="#f0f0f0")
        
        # Canvas içeriğini yapılandır
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        # Canvas ve scrollbar'ı yerleştir
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Canvas içine scrollable frame'i yerleştir
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Mouse wheel ile scroll etmeyi etkinleştir
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        # Konu bilgileri - Yeni konular ve açıklamalar
        topics = [
            {
                "id": 1,
                "name": "Trafik ve Çevre Bilgisi",
                "description": "Trafik levhalarını sadece ezberleme, ne anlama geldiklerini öğren ve yolda bir adım önde ol!",
                "question_count": 25,
                "color": "#3498db",  # Mavi
                "icon": "🛣️"
            },
            {
                "id": 2,
                "name": "Araç Tekniği",
                "description": "Motorun nasıl çalıştığını, araç bakımını ve teknik detayları sade anlatımlarla öğren.",
                "question_count": 20,
                "color": "#e74c3c",  # Kırmızı
                "icon": "🔧"
            },
            {
                "id": 3,
                "name": "İlk Yardım Bilgisi",
                "description": "Kazalarda ilk müdahaleyi nasıl yapacağını, temel ilk yardım adımlarını pratik bilgilerle öğren.",
                "question_count": 15,
                "color": "#2ecc71",  # Yeşil
                "icon": "🚑"
            },
            {
                "id": 4,
                "name": "Trafik Adabı",
                "description": "Görgü kurallarını öğren, sadece iyi bir sürücü değil, örnek bir vatandaş ol!",
                "question_count": 10,
                "color": "#9b59b6",  # Mor
                "icon": "📋"
            }
        ]
        
        # Her konu için kart oluştur - Ekran görüntüsüne benzer düzen
        for topic in topics:
            # Kart çerçevesi - Genişliği sabit tutuyoruz
            card_frame = tk.Frame(scrollable_frame, bg=topic["color"], bd=0)
            card_frame.pack(fill="x", pady=10, padx=10)
            
            # İç içerik çerçevesi - Yüksekliği sabit
            inner_frame = tk.Frame(card_frame, bg=topic["color"], padx=20, pady=15)
            inner_frame.pack(fill="x")
            
            # Sol taraf (ikon)
            icon_frame = tk.Frame(inner_frame, bg=topic["color"], width=60)
            icon_frame.pack(side="left", fill="y")
            icon_frame.pack_propagate(False)  # Sabit genişlik için
            
            # İkon
            icon_label = tk.Label(
                icon_frame, 
                text=topic["icon"], 
                font=("Arial", 24), 
                bg=topic["color"], 
                fg="white"
            )
            icon_label.pack(expand=True)
            
            # Başlık ve açıklama kısmı
            content_frame = tk.Frame(inner_frame, bg=topic["color"])
            content_frame.pack(side="left", fill="both", expand=True, padx=(0, 10))
            
            # Konu adı - Tam genişlikte
            name_label = tk.Label(
                content_frame, 
                text=topic["name"], 
                font=("Arial", 18, "bold"), 
                bg=topic["color"], 
                fg="white",
                anchor="w"
            )
            name_label.pack(fill="x", anchor="w")
            
            # Konu açıklaması
            desc_label = tk.Label(
                content_frame, 
                text=topic["description"], 
                font=("Arial", 12), 
                bg=topic["color"], 
                fg="white",
                wraplength=500,
                justify="left",
                anchor="w"
            )
            desc_label.pack(fill="x", anchor="w", pady=(5, 0))
            
            # Soru sayısı
            question_label = tk.Label(
                content_frame, 
                text=f"Soru Sayısı: {topic['question_count']}", 
                font=("Arial", 12, "italic"), 
                bg=topic["color"], 
                fg="white",
                anchor="w"
            )
            question_label.pack(fill="x", anchor="w", pady=(5, 0))
            
            # Sağ taraf (butonlar)
            right_frame = tk.Frame(inner_frame, bg=topic["color"], width=100)
            right_frame.pack(side="right", fill="y")
            
            # Butonlar
            study_btn = tk.Button(
                right_frame, 
                text="Öğren", 
                command=lambda t=topic["id"]: self.show_topic_content(t),
                font=("Arial", 12, "bold"), 
                bg="white", 
                fg=topic["color"], 
                relief="flat",
                width=8
            )
            study_btn.pack(pady=(0, 5))
            
            test_btn = tk.Button(
                right_frame, 
                text="Pratik Yap", 
                command=lambda t=topic["id"]: self.start_topic_test(t),
                font=("Arial", 12, "bold"), 
                bg="white", 
                fg=topic["color"], 
                relief="flat",
                width=8
            )
            test_btn.pack()
        
        # Alt menü - Sabit pozisyonda
        bottom_frame = tk.Frame(self.root, bg="#f0f0f0")
        bottom_frame.place(relx=0.5, rely=0.9, anchor="center")
        
        # Ana menüye dön butonu
        back_btn = tk.Button(
            bottom_frame, 
            text="Ana Menüye Dön", 
            command=self.show_main_menu,
            font=("Arial", 12, "bold"), 
            bg="#222", 
            fg="white", 
            relief="flat",
            height=2,
            width=15
        )
        back_btn.pack(pady=10)
        
        # Scrollbar'ın görünürlüğünü kontrol et
        def update_scrollbar(*args):
            if canvas.winfo_height() < scrollable_frame.winfo_reqheight():
                scrollbar.pack(side="right", fill="y")
            else:
                scrollbar.pack_forget()
        
        # Canvas yeniden boyutlandırıldığında scrollbar'ı güncelle
        canvas.bind("<Configure>", update_scrollbar)
        
        # İlk yükleme için scrollbar'ı güncelle
        self.root.update_idletasks()
        update_scrollbar()
    
    def show_level_test(self):
        """Seviye belirleme testini gösterir"""
        self.clear_window()
        
        # Başlık
        title_label = ttk.Label(self.root, text="Seviye Belirleme Testi", style='Title.TLabel')
        title_label.pack(pady=20)
        
        # Test açıklaması
        desc_label = ttk.Label(self.root, text="Bu test 10 sorudan oluşur ve seviyenizi belirler.", style='Subtitle.TLabel')
        desc_label.pack(pady=10)
        
        # Test başlatma butonu
        ttk.Button(self.root, text="Teste Başla", command=self.start_level_test, style='Menu.TButton').pack(pady=30)
        
        # Geri dön butonu
        ttk.Button(self.root, text="Ana Menüye Dön", command=self.show_main_menu, style='Button.TButton').pack(pady=20)
    
    def start_level_test(self):
        """Seviye belirleme testini başlatır"""
        # Kullanıcı kontrolü
        if not self.current_user:
            messagebox.showerror("Hata", "Lütfen önce giriş yapın!")
            self.show_login()
            return
        
        # Rastgele 20 soru seç
        self.cursor.execute('''
            SELECT * FROM questions 
            ORDER BY RANDOM() 
            LIMIT 20
        ''')
        questions = self.cursor.fetchall()
        
        if not questions:
            messagebox.showerror("Hata", "Soru bulunamadı!")
            return
        
        # Test ekranını göster
        self.show_test_screen(questions, self.finish_level_test)
    
    def start_topic_test(self, topic_id, topic_name):
        """Konu testini başlatır"""
        # Konuya ait soruları getir
        self.cursor.execute('''
            SELECT id, question_text, option_a, option_b, option_c, option_d, correct_answer 
            FROM questions 
            WHERE topic_id = ? 
            ORDER BY RANDOM() 
            LIMIT 10
        ''', (topic_id,))
        questions = self.cursor.fetchall()
        
        if len(questions) < 5:
            messagebox.showerror("Hata", "Bu konu için yeterli soru bulunamadı!")
            return
        
        self.show_test(questions, f"{topic_name} Testi", lambda score, total: self.finish_topic_test(topic_id, score, total))
    
    def show_test(self, questions, title, finish_callback):
        """Test arayüzünü gösterir"""
        self.clear_window()

        # Başlık
        title_label = tk.Label(self.root, text=title, font=("Arial", 32, "bold"), fg="#222", bg="#f0f0f0")
        title_label.pack(pady=(40, 0))
        subtitle_label = tk.Label(self.root, text="Soruları cevaplayın ve ilerlemenizi takip edin", font=("Arial", 16), fg="#444", bg="#f0f0f0")
        subtitle_label.pack(pady=(0, 30))

        # Test kutusu (Frame)
        test_box = tk.Frame(self.root, bg="white", bd=0, relief="flat", highlightthickness=0)
        test_box.pack(pady=10)
        test_box.place(relx=0.5, rely=0.5, anchor="center", width=600, height=400)
        test_box.configure(highlightbackground="#ddd", highlightcolor="#ddd")
        test_box.pack_propagate(False)

        # Test durumu
        self.current_question = 0
        self.test_questions = questions
        self.test_answers = []
        self.finish_callback = finish_callback

        # İlerleme çubuğu
        self.progress_var = tk.DoubleVar()
        progress_bar = tk.Canvas(test_box, width=520, height=18, bg="#eee", highlightthickness=0)
        progress_bar.pack(pady=10, padx=40)
        self.progress_bar = progress_bar
        self.progress_bar_rect = progress_bar.create_rectangle(0, 0, 0, 18, fill="#0077cc", width=0)

        # Soru frame
        self.question_frame = tk.Frame(test_box, bg="white")
        self.question_frame.pack(pady=10, padx=40, fill="both", expand=True)

        # İlk soruyu göster
        self.show_question()

    def show_question(self):
        """Mevcut soruyu gösterir"""
        # Önceki soru frame'ini temizle
        for widget in self.question_frame.winfo_children():
            widget.destroy()

        if self.current_question >= len(self.test_questions):
            # Test bitti
            self.finish_test()
            return

        question = self.test_questions[self.current_question]

        # Soru numarası
        question_num_label = tk.Label(self.question_frame, 
                                      text=f"Soru {self.current_question + 1}/{len(self.test_questions)}", 
                                      font=("Arial", 15, "bold"), bg="white", fg="#222")
        question_num_label.pack(pady=10, anchor="w")

        # Soru metni
        question_label = tk.Label(self.question_frame, text=question[1], font=("Arial", 13), wraplength=500, bg="white", fg="#222")
        question_label.pack(pady=20, anchor="w")

        # Cevap seçenekleri
        options = [question[2], question[3], question[4], question[5]]
        self.selected_answer = tk.StringVar()

        for i, option in enumerate(options):
            tk.Radiobutton(self.question_frame, text=option, variable=self.selected_answer, 
                           value=chr(65 + i), font=("Arial", 12), bg="white", anchor="w").pack(pady=5, anchor="w")

        # Butonlar
        button_frame = tk.Frame(self.question_frame, bg="white")
        button_frame.pack(pady=30)

        if self.current_question > 0:
            tk.Button(button_frame, text="Önceki", command=self.previous_question, font=("Arial", 12, "bold"), bg="#0077cc", fg="white", relief="flat", width=12).pack(side=tk.LEFT, padx=10)

        if self.current_question < len(self.test_questions) - 1:
            tk.Button(button_frame, text="Sonraki", command=self.next_question, font=("Arial", 12, "bold"), bg="#222", fg="white", relief="flat", width=12).pack(side=tk.LEFT, padx=10)
        else:
            tk.Button(button_frame, text="Testi Bitir", command=self.finish_test, font=("Arial", 12, "bold"), bg="#27ae60", fg="white", relief="flat", width=12).pack(side=tk.LEFT, padx=10)

        # İlerleme çubuğunu güncelle
        total = len(self.test_questions)
        done = self.current_question + 1
        width = int(520 * done / total)
        self.progress_bar.coords(self.progress_bar_rect, 0, 0, width, 18)

    def next_question(self):
        """Sonraki soruya geçer"""
        # Cevabı kaydet
        if self.current_question < len(self.test_answers):
            self.test_answers[self.current_question] = self.selected_answer.get()
        else:
            self.test_answers.append(self.selected_answer.get())
        
        self.current_question += 1
        self.show_question()
    
    def previous_question(self):
        """Önceki soruya döner"""
        # Cevabı kaydet
        if self.current_question < len(self.test_answers):
            self.test_answers[self.current_question] = self.selected_answer.get()
        else:
            self.test_answers.append(self.selected_answer.get())
        
        self.current_question -= 1
        self.show_question()
    
    def finish_test(self):
        """Testi bitirir ve sonuçları hesaplar"""
        # Son cevabı kaydet
        if self.current_question < len(self.test_answers):
            self.test_answers[self.current_question] = self.selected_answer.get()
        else:
            self.test_answers.append(self.selected_answer.get())
        
        # Puanı hesapla
        score = 0
        for i, answer in enumerate(self.test_answers):
            if answer == self.test_questions[i][6]:  # correct_answer
                score += 1
        
        # Callback'i çağır
        self.finish_callback(score, len(self.test_questions))
    
    def finish_level_test(self, score, total):
        """Seviye belirleme testini bitirir"""
        # Kullanıcı kontrolü
        if not self.current_user:
            messagebox.showerror("Hata", "Kullanıcı oturumu bulunamadı!")
            self.show_main_menu()
            return
            
        # Seviyeyi hesapla
        percentage = (score / total) * 100
        
        if percentage >= 80:
            level = 3  # İleri
        elif percentage >= 60:
            level = 2  # Orta
        else:
            level = 1  # Başlangıç
        
        # Kullanıcı seviyesini kaydet
        self.cursor.execute('''
            INSERT OR REPLACE INTO user_levels (user_id, level, test_score)
            VALUES (?, ?, ?)
        ''', (self.current_user['id'], level, score))
        self.conn.commit()
        
        self.user_level = level
        
        # Sonuç sayfasını göster
        self.show_test_result("Seviye Belirleme Testi", score, total, level)
    
    def finish_topic_test(self, topic_id, score, total):
        """Konu testini bitirir"""
        # Kullanıcı kontrolü
        if not self.current_user:
            messagebox.showerror("Hata", "Kullanıcı oturumu bulunamadı!")
            self.show_main_menu()
            return
            
        # Test sonucunu kaydet
        self.cursor.execute('''
            INSERT INTO test_results (user_id, topic_id, score, total_questions)
            VALUES (?, ?, ?, ?)
        ''', (self.current_user['id'], topic_id, score, total))
        self.conn.commit()
        
        # Sonuç sayfasını göster
        self.show_test_result("Konu Testi", score, total)
    
    def show_test_result(self, test_type, score, total, level=None):
        """Test sonuç sayfasını gösterir"""
        self.clear_window()

        # Başlık ve alt başlık
        title_label = tk.Label(self.root, text=f"{test_type} Sonucu", font=("Arial", 32, "bold"), fg="#222", bg="#f0f0f0")
        title_label.pack(pady=(40, 0))
        subtitle_label = tk.Label(self.root, text="Test performansınızı inceleyin", font=("Arial", 16), fg="#444", bg="#f0f0f0")
        subtitle_label.pack(pady=(0, 30))

        # Sonuç kutusu (Frame)
        result_box = tk.Frame(self.root, bg="white", bd=0, relief="flat", highlightthickness=0)
        result_box.pack(pady=10)
        result_box.place(relx=0.5, rely=0.5, anchor="center", width=420, height=320)
        result_box.configure(highlightbackground="#ddd", highlightcolor="#ddd")
        result_box.pack_propagate(False)

        percentage = (score / total) * 100

        tk.Label(result_box, text=f"Doğru: {score}/{total}", font=("Arial", 18, "bold"), bg="white", fg="#222").pack(pady=10)
        tk.Label(result_box, text=f"Başarı Oranı: %{percentage:.1f}", font=("Arial", 15), bg="white", fg="#444").pack(pady=10)

        if level:
            level_names = {1: "Başlangıç", 2: "Orta", 3: "İleri"}
            tk.Label(result_box, text=f"Seviyeniz: {level_names[level]}", font=("Arial", 15, "bold"), bg="white", fg="#0077cc").pack(pady=10)

        # Değerlendirme
        if percentage >= 80:
            evaluation = "Mükemmel! Çok iyi bir performans gösterdiniz."
        elif percentage >= 60:
            evaluation = "İyi! Biraz daha çalışarak daha iyi sonuçlar alabilirsiniz."
        else:
            evaluation = "Daha fazla çalışmanız gerekiyor. Konuları tekrar gözden geçirin."

        tk.Label(result_box, text=evaluation, font=("Arial", 12), wraplength=350, bg="white", fg="#444").pack(pady=20)

        # Butonlar
        button_frame = tk.Frame(result_box, bg="white")
        button_frame.pack(pady=10)

        tk.Button(button_frame, text="Ana Menüye Dön", command=self.show_main_menu, font=("Arial", 12, "bold"), bg="#0077cc", fg="white", relief="flat", width=14).pack(side=tk.LEFT, padx=10)
        tk.Button(button_frame, text="Konulara Dön", command=self.show_topics, font=("Arial", 12, "bold"), bg="#222", fg="white", relief="flat", width=14).pack(side=tk.LEFT, padx=10)
    
    def show_profile(self):
        """Profil sayfasını gösterir"""
        self.clear_window()
        
        # Kullanıcı kontrolü
        if not hasattr(self, 'current_user') or not self.current_user:
            messagebox.showerror("Hata", "Kullanıcı oturumu bulunamadı!")
            self.show_main_menu()
            return

        # Ana menüye dön butonu (üst kısımda)
        back_btn = tk.Button(
            self.root, 
            text="← Ana Menüye Dön", 
            command=self.show_main_menu,
            font=("Arial", 12), 
            bg="#0077cc", 
            fg="white", 
            relief="flat",
            padx=10,
            pady=5
        )
        back_btn.place(x=20, y=20)

        # Başlık ve alt başlık
        title_label = tk.Label(self.root, text="Profil", font=("Arial", 32, "bold"), fg="#222", bg="#f0f0f0")
        title_label.pack(pady=(40, 0))
        subtitle_label = tk.Label(self.root, text="Kullanıcı bilgileri ve istatistikler", font=("Arial", 16), fg="#444", bg="#f0f0f0")
        subtitle_label.pack(pady=(0, 30))

        # Profil kutusu (Frame)
        profile_box = tk.Frame(self.root, bg="white", bd=1, relief="solid", highlightthickness=0)
        profile_box.place(relx=0.5, rely=0.5, anchor="center", width=500, height=500)  # Yüksekliği artırdım
        profile_box.configure(highlightbackground="#ddd", highlightcolor="#ddd")
        profile_box.pack_propagate(False)

        # Kullanıcı bilgileri bölümü
        user_frame = tk.Frame(profile_box, bg="white", padx=20, pady=15)
        user_frame.pack(fill="x")
        
        # Kullanıcı avatarı - Veritabanından alınabilir veya varsayılan değer kullanılabilir
        avatar_id = 1  # Varsayılan avatar
        
        # Veritabanından kullanıcının avatar seçimini al
        if hasattr(self, 'conn') and hasattr(self, 'cursor'):
            try:
                self.cursor.execute('''
                    SELECT avatar_id FROM user_settings 
                    WHERE user_id = ?
                ''', (self.current_user.get('id', 0),))
                result = self.cursor.fetchone()
                if result and result[0]:
                    avatar_id = result[0]
            except Exception as e:
                print(f"Veritabanı sorgusu hatası: {e}")
        
        # Avatar emojileri - Herkese hitap edecek çeşitli seçenekler
        avatars = {
            1: "👤", # Klasik kullanıcı
            2: "👩", # Kadın
            3: "👨", # Erkek
            4: "🧑", # Nötr kişi
            5: "🦸", # Süper kahraman
            6: "🧠", # Beyin/Zeka
            7: "🚗", # Araba (ehliyet temalı)
            8: "🎓", # Mezuniyet/Eğitim
            9: "🌟", # Yıldız
            10: "🐱", # Kedi
        }
        
        # Avatar çerçevesi
        avatar_frame = tk.Frame(user_frame, bg="white")
        avatar_frame.pack(side="left", padx=(0, 15))
        
        # Seçilen avatar
        avatar_label = tk.Label(
            avatar_frame, 
            text=avatars.get(avatar_id, "👤"), 
            font=("Arial", 36), 
            bg="white", 
            fg="#0077cc"
        )
        avatar_label.pack()
        
        # Avatar değiştirme butonu
        change_avatar_btn = tk.Button(
            avatar_frame, 
            text="Değiştir", 
            command=lambda: self.change_avatar(avatar_label, avatars),
            font=("Arial", 8), 
            bg="#f0f0f0", 
            fg="#444", 
            relief="flat",
            padx=5,
            pady=2
        )
        change_avatar_btn.pack(pady=(5, 0))
        
        # Kullanıcı bilgileri
        user_info_frame = tk.Frame(user_frame, bg="white")
        user_info_frame.pack(side="left", fill="both", expand=True)
        
        # Kullanıcı adı ve e-posta
        username = self.current_user.get('email', '').split('@')[0] if self.current_user.get('email') else "Kullanıcı"
        email = self.current_user.get('email', 'E-posta bulunamadı')
        
        tk.Label(user_info_frame, text=f"Kullanıcı Adı: {username}", 
                 font=("Arial", 14, "bold"), bg="white", fg="#222", anchor="w").pack(fill="x", pady=2)
        tk.Label(user_info_frame, text=f"E-posta: {email}", 
                 font=("Arial", 12), bg="white", fg="#444", anchor="w").pack(fill="x", pady=2)
        
        # Kayıt tarihi - Veritabanından alınabilir veya varsayılan değer kullanılabilir
        created_at = datetime.datetime.now().strftime("%Y-%m-%d")
        tk.Label(user_info_frame, text=f"Kayıt Tarihi: {created_at}", 
                 font=("Arial", 12), bg="white", fg="#444", anchor="w").pack(fill="x", pady=2)
        
        # Ayırıcı çizgi
        separator = tk.Frame(profile_box, height=1, bg="#ddd")
        separator.pack(fill="x", padx=20, pady=15)
        
        # Seviye bilgisi
        level_frame = tk.Frame(profile_box, bg="white", padx=20, pady=5)
        level_frame.pack(fill="x")
        
        # Seviye ikonu
        level_icon = tk.Label(level_frame, text="🧠", font=("Arial", 24), bg="white", fg="#27ae60")
        level_icon.pack(side="left", padx=(0, 15))
        
        # Seviye bilgileri
        level_info_frame = tk.Frame(level_frame, bg="white")
        level_info_frame.pack(side="left", fill="both", expand=True)
        
        # Kullanıcı seviyesi - Varsayılan olarak None (Belirlenmemiş)
        user_level = getattr(self, 'user_level', None)
        
        # Seviye durumu
        if user_level:
            level_names = {1: "Başlangıç (A1)", 2: "Orta (A2)", 3: "İleri (B1)"}
            tk.Label(level_info_frame, text=f"Seviye: {level_names.get(user_level, 'Belirlenmemiş')}", 
                    font=("Arial", 14, "bold"), bg="white", fg="#27ae60", anchor="w").pack(fill="x", pady=2)
            
            # İlerleme yüzdesi
            progress_percent = (user_level / 3) * 100
            tk.Label(level_info_frame, text=f"İlerleme: %{progress_percent:.0f} Tamamlandı", 
                    font=("Arial", 12), bg="white", fg="#444", anchor="w").pack(fill="x", pady=2)
            
            # İlerleme çubuğu
            progress_frame = tk.Frame(level_info_frame, bg="white", pady=5)
            progress_frame.pack(fill="x")
            
            progress_bg = tk.Frame(progress_frame, bg="#eee", height=15)
            progress_bg.pack(fill="x")
            
            progress_bar = tk.Frame(progress_bg, bg="#27ae60", height=15, width=int(400 * progress_percent / 100))
            progress_bar.place(x=0, y=0)
        else:
            tk.Label(level_info_frame, text="Seviye: Belirlenmemiş", 
                    font=("Arial", 14, "bold"), bg="white", fg="#888", anchor="w").pack(fill="x", pady=2)
            tk.Label(level_info_frame, text="Seviye belirleme testini çözerek seviyenizi öğrenebilirsiniz.", 
                    font=("Arial", 12), bg="white", fg="#444", anchor="w").pack(fill="x", pady=2)
        
        # Ayırıcı çizgi
        separator2 = tk.Frame(profile_box, height=1, bg="#ddd")
        separator2.pack(fill="x", padx=20, pady=15)
        
        # Sınav geri sayımı
        countdown_frame = tk.Frame(profile_box, bg="white", padx=20, pady=5)
        countdown_frame.pack(fill="x")
        
        # Takvim ikonu
        calendar_icon = tk.Label(countdown_frame, text="📅", font=("Arial", 24), bg="white", fg="#e74c3c")
        calendar_icon.pack(side="left", padx=(0, 15))
        
        # Sınav tarihi bilgileri
        countdown_info_frame = tk.Frame(countdown_frame, bg="white")
        countdown_info_frame.pack(side="left", fill="both", expand=True)
        
        # Kullanıcının sınav tarihini veritabanından al veya varsayılan tarih kullan
        if hasattr(self, 'conn') and hasattr(self, 'cursor'):
            try:
                self.cursor.execute('''
                    SELECT exam_date FROM user_settings 
                    WHERE user_id = ?
                ''', (self.current_user.get('id', 0),))
                result = self.cursor.fetchone()
                if result and result[0]:
                    exam_date = datetime.datetime.strptime(result[0], "%Y-%m-%d")
                else:
                    # Varsayılan tarih (30 gün sonrası)
                    exam_date = datetime.datetime.now() + datetime.timedelta(days=30)
            except Exception as e:
                print(f"Veritabanı sorgusu hatası: {e}")
                exam_date = datetime.datetime.now() + datetime.timedelta(days=30)
        else:
            exam_date = datetime.datetime.now() + datetime.timedelta(days=30)
        
        days_left = (exam_date - datetime.datetime.now()).days
        
        # Sınav tarihi ve kalan süre
        exam_date_label = tk.Label(countdown_info_frame, text=f"Sınav Tarihi: {exam_date.strftime('%d.%m.%Y')}", 
                 font=("Arial", 14, "bold"), bg="white", fg="#e74c3c", anchor="w")
        exam_date_label.pack(fill="x", pady=2)
        
        days_left_label = tk.Label(countdown_info_frame, text=f"Kalan Süre: {days_left} gün", 
                 font=("Arial", 12), bg="white", fg="#444", anchor="w")
        days_left_label.pack(fill="x", pady=2)
        
        # Motivasyon mesajı
        if days_left <= 7:
            motivation = "Son düzlüktesin! Şimdi daha çok çalışma zamanı!"
        elif days_left <= 14:
            motivation = "İki haftadan az kaldı! Eksiklerini tamamla."
        else:
            motivation = "Düzenli çalışarak başarıya ulaşabilirsin!"
        
        motivation_label = tk.Label(countdown_info_frame, text=motivation, 
                 font=("Arial", 12, "italic"), bg="white", fg="#e74c3c", anchor="w")
        motivation_label.pack(fill="x", pady=2)
        
        # Sınav tarihi değiştirme butonu
        change_date_btn = tk.Button(
            countdown_info_frame, 
            text="Sınav Tarihini Değiştir", 
            command=lambda: self.change_exam_date(exam_date_label, days_left_label, motivation_label),
            font=("Arial", 10), 
            bg="#e74c3c", 
            fg="white", 
            relief="flat",
            height=1
        )
        change_date_btn.pack(anchor="e", pady=(5, 0))
        
        # Ayırıcı çizgi
        separator3 = tk.Frame(profile_box, height=1, bg="#ddd")
        separator3.pack(fill="x", padx=20, pady=15)
        
        # Test istatistikleri - Varsayılan değerler
        total_tests = 0
        avg_score = 0
        
        # Veritabanı bağlantısı varsa gerçek değerleri alabiliriz
        if hasattr(self, 'conn') and hasattr(self, 'cursor'):
            try:
                self.cursor.execute('''
                    SELECT COUNT(*) as total_tests, AVG(score * 100.0 / total_questions) as avg_score
                    FROM test_results 
                    WHERE user_id = ?
                ''', (self.current_user.get('id', 0),))
                stats = self.cursor.fetchone()
                if stats:
                    total_tests = stats[0]
                    avg_score = stats[1] if stats[1] is not None else 0
            except Exception as e:
                print(f"Veritabanı sorgusu hatası: {e}")
        
        stats_frame = tk.Frame(profile_box, bg="white", padx=20, pady=5)
        stats_frame.pack(fill="x")
        
        # İstatistik ikonu
        stats_icon = tk.Label(stats_frame, text="📊", font=("Arial", 24), bg="white", fg="#9b59b6")
        stats_icon.pack(side="left", padx=(0, 15))
        
        # İstatistik bilgileri
        stats_info_frame = tk.Frame(stats_frame, bg="white")
        stats_info_frame.pack(side="left", fill="both", expand=True)
        
        if total_tests > 0:
            tk.Label(stats_info_frame, text=f"Toplam Test: {total_tests}", 
                     font=("Arial", 14, "bold"), bg="white", fg="#9b59b6", anchor="w").pack(fill="x", pady=2)
            tk.Label(stats_info_frame, text=f"Ortalama Başarı: %{avg_score:.1f}", 
                     font=("Arial", 12), bg="white", fg="#444", anchor="w").pack(fill="x", pady=2)
        else:
            tk.Label(stats_info_frame, text="Henüz test çözülmemiş", 
                     font=("Arial", 14, "bold"), bg="white", fg="#888", anchor="w").pack(fill="x", pady=2)
            tk.Label(stats_info_frame, text="Konulara giderek testleri çözmeye başlayabilirsiniz.", 
                     font=("Arial", 12), bg="white", fg="#444", anchor="w").pack(fill="x", pady=2)
        
        # Butonlar
        button_frame = tk.Frame(profile_box, bg="white", padx=20, pady=15)
        button_frame.pack(fill="x", side="bottom")
        
        # Ana menüye dön butonu
        back_btn = tk.Button(
            button_frame, 
            text="Ana Menüye Dön", 
            command=self.show_main_menu,
            font=("Arial", 12, "bold"), 
            bg="#0077cc", 
            fg="white", 
            relief="flat",
            height=2,
            width=15
        )
        back_btn.pack(side="left", padx=5)
        
        # Seviye testi butonu
        level_test_btn = tk.Button(
            button_frame, 
            text="Seviye Testi", 
            command=lambda: self.show_level_test() if hasattr(self, 'show_level_test') else None,
            font=("Arial", 12, "bold"), 
            bg="#27ae60", 
            fg="white", 
            relief="flat",
            height=2,
            width=15
        )
        level_test_btn.pack(side="right", padx=5)

    def change_avatar(self, avatar_label, avatars):
        """Kullanıcının profil avatarını değiştirmesini sağlar"""
        # Avatar seçme penceresi
        avatar_window = tk.Toplevel(self.root)
        avatar_window.title("Profil Görseli Seçin")
        avatar_window.geometry("500x600")
        avatar_window.configure(bg="white")
        avatar_window.resizable(False, False)
        
        # Pencereyi ana pencerenin ortasına konumlandır
        avatar_window.transient(self.root)
        avatar_window.grab_set()
        
        # Başlık
        tk.Label(avatar_window, text="Profil Görselinizi Seçin", font=("Arial", 16, "bold"), 
                 bg="white", fg="#222").pack(pady=(20, 10))
        
        # Açıklama
        tk.Label(avatar_window, text="Aşağıdaki görsellerden birini seçin.", 
                 font=("Arial", 12), bg="white", fg="#444").pack(pady=(0, 20))
        
        # Kaydırılabilir çerçeve oluştur
        canvas = tk.Canvas(avatar_window, bg="white", highlightthickness=0)
        scrollbar = tk.Scrollbar(avatar_window, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="white")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True, padx=(20, 0))
        scrollbar.pack(side="right", fill="y", padx=(0, 20))
        
        # Seçilen avatar ID'si
        selected_avatar = tk.IntVar(value=1)
        
        # Avatar grid'i oluştur (3 sütun)
        row, col = 0, 0
        avatar_frames = []  # Tüm avatar çerçevelerini sakla
        
        for avatar_id, emoji in avatars.items():
            # Her avatar için bir frame
            avatar_option = tk.Frame(scrollable_frame, bg="white", padx=10, pady=10, 
                                     highlightbackground="#ddd", highlightthickness=1)
            avatar_option.grid(row=row, column=col, padx=15, pady=15)
            avatar_frames.append((avatar_id, avatar_option))
            
            # Avatar emoji
            avatar_emoji = tk.Label(
                avatar_option, 
                text=emoji, 
                font=("Arial", 48),
                bg="white", 
                fg="#0077cc",
                width=2,
                height=1
            )
            avatar_emoji.pack(pady=10)
            
            # Seçim radio butonu - Daha belirgin
            radio_btn = tk.Radiobutton(
                avatar_option,
                text=f"Seçenek {avatar_id}",
                variable=selected_avatar,
                value=avatar_id,
                bg="white",
                font=("Arial", 10, "bold"),
                indicatoron=0,  # Buton görünümü için
                selectcolor="#e6f2ff",  # Seçildiğinde arka plan rengi
                width=10,
                pady=5
            )
            radio_btn.pack(pady=5)
            
            # Tüm çerçeveye tıklandığında seçim yapılsın
            def make_select_func(avatar_id, option_frame):
                def select_avatar(event=None):
                    selected_avatar.set(avatar_id)
                    # Tüm çerçevelerin arka planını sıfırla
                    for _, frame in avatar_frames:
                        frame.config(highlightbackground="#ddd", highlightthickness=1)
                    # Seçilen çerçevenin arka planını değiştir
                    option_frame.config(highlightbackground="#0077cc", highlightthickness=2)
                return select_avatar
            
            select_func = make_select_func(avatar_id, avatar_option)
            avatar_emoji.bind("<Button-1>", select_func)
            avatar_option.bind("<Button-1>", select_func)
            radio_btn.config(command=select_func)
            
            # Grid pozisyonunu güncelle
            col += 1
            if col > 2:  # 3 sütun tamamlandığında alt satıra geç
                col = 0
                row += 1
        
        # Butonlar için frame
        button_frame = tk.Frame(avatar_window, bg="white")
        button_frame.pack(fill="x", pady=20, padx=20)
        
        # Hata mesajı için label
        error_label = tk.Label(button_frame, text="", font=("Arial", 12), bg="white", fg="red")
        error_label.pack(pady=10)
        
        # Kaydet butonu
        def save_avatar():
            try:
                # Seçilen avatar ID'sini al
                avatar_id = selected_avatar.get()
                
                # Veritabanına kaydet
                if hasattr(self, 'conn') and hasattr(self, 'cursor'):
                    try:
                        # user_settings tablosu var mı kontrol et
                        self.cursor.execute('''
                            CREATE TABLE IF NOT EXISTS user_settings (
                                user_id INTEGER PRIMARY KEY,
                                exam_date TEXT,
                                avatar_id INTEGER
                            )
                        ''')
                        
                        # Kullanıcının ayarı var mı kontrol et
                        self.cursor.execute('''
                            SELECT * FROM user_settings WHERE user_id = ?
                        ''', (self.current_user.get('id', 0),))
                        
                        if self.cursor.fetchone():
                            # Güncelle
                            self.cursor.execute('''
                                UPDATE user_settings SET avatar_id = ? WHERE user_id = ?
                            ''', (avatar_id, self.current_user.get('id', 0)))
                        else:
                            # Yeni kayıt ekle
                            self.cursor.execute('''
                                INSERT INTO user_settings (user_id, avatar_id) VALUES (?, ?)
                            ''', (self.current_user.get('id', 0), avatar_id))
                        
                        self.conn.commit()
                    except Exception as e:
                        print(f"Veritabanı hatası: {e}")
                        error_label.config(text=f"Veritabanı hatası: {e}")
                        return
                
                # Arayüzü güncelle
                avatar_label.config(text=avatars.get(avatar_id, "👤"))
                
                # Pencereyi kapat
                avatar_window.destroy()
                
            except Exception as e:
                error_label.config(text=f"Hata oluştu: {e}")
        
        # Seç ve Kapat butonu - Daha belirgin
        save_btn = tk.Button(
            button_frame, 
            text="Görseli Seç ve Kapat", 
            command=save_avatar,
            font=("Arial", 12, "bold"), 
            bg="#0077cc", 
            fg="white", 
            relief="raised",  # Daha belirgin görünüm
            height=2,
            width=20
        )
        save_btn.pack(pady=10)
        
        # İptal butonu
        cancel_btn = tk.Button(
            button_frame, 
            text="İptal", 
            command=avatar_window.destroy,
            font=("Arial", 12), 
            bg="#ccc", 
            fg="#444", 
            relief="raised",  # Daha belirgin görünüm
            height=1,
            width=10
        )
        cancel_btn.pack()
        
        # İlk avatar seçeneğini varsayılan olarak seç
        if avatar_frames:
            make_select_func(avatar_frames[0][0], avatar_frames[0][1])()
    def change_exam_date(self, date_label, days_label, motivation_label):
        """Kullanıcının sınav tarihini değiştirmesini sağlar"""
        # Tarih seçme penceresi
        date_window = tk.Toplevel(self.root)
        date_window.title("Sınav Tarihi Seçin")
        date_window.geometry("400x300")
        date_window.configure(bg="white")
        date_window.resizable(False, False)
        
        # Pencereyi ana pencerenin ortasına konumlandır
        date_window.transient(self.root)
        date_window.grab_set()
        
        # Başlık
        tk.Label(date_window, text="Sınav Tarihinizi Seçin", font=("Arial", 16, "bold"), 
                 bg="white", fg="#222").pack(pady=(20, 10))
        
        # Açıklama
        tk.Label(date_window, text="Lütfen ehliyet sınavınızın tarihini seçin.", 
                 font=("Arial", 12), bg="white", fg="#444").pack(pady=(0, 20))
        
        # Tarih seçici çerçeve
        date_frame = tk.Frame(date_window, bg="white")
        date_frame.pack(pady=10)
        
        # Bugünün tarihi
        today = datetime.datetime.now()
        
        # Gün, ay, yıl seçicileri
        day_var = tk.StringVar(value=str(today.day))
        month_var = tk.StringVar(value=str(today.month))
        year_var = tk.StringVar(value=str(today.year))
        
        # Gün seçici
        day_frame = tk.Frame(date_frame, bg="white")
        day_frame.pack(side="left", padx=10)
        tk.Label(day_frame, text="Gün", font=("Arial", 12), bg="white").pack()
        day_menu = ttk.Combobox(day_frame, textvariable=day_var, width=5)
        day_menu['values'] = tuple(range(1, 32))
        day_menu.pack(pady=5)
        
        # Ay seçici
        month_frame = tk.Frame(date_frame, bg="white")
        month_frame.pack(side="left", padx=10)
        tk.Label(month_frame, text="Ay", font=("Arial", 12), bg="white").pack()
        month_menu = ttk.Combobox(month_frame, textvariable=month_var, width=5)
        month_menu['values'] = tuple(range(1, 13))
        month_menu.pack(pady=5)
        
        # Yıl seçici
        year_frame = tk.Frame(date_frame, bg="white")
        year_frame.pack(side="left", padx=10)
        tk.Label(year_frame, text="Yıl", font=("Arial", 12), bg="white").pack()
        year_menu = ttk.Combobox(year_frame, textvariable=year_var, width=7)
        year_menu['values'] = tuple(range(today.year, today.year + 5))
        year_menu.pack(pady=5)
        
        # Hata mesajı için label
        error_label = tk.Label(date_window, text="", font=("Arial", 12), bg="white", fg="red")
        error_label.pack(pady=10)
        
        # Kaydet butonu
        def save_date():
            try:
                # Seçilen tarihi al
                day = int(day_var.get())
                month = int(month_var.get())
                year = int(year_var.get())
                
                # Geçerli bir tarih mi kontrol et
                try:
                    selected_date = datetime.datetime(year, month, day)
                except ValueError:
                    error_label.config(text="Geçersiz tarih! Lütfen tekrar kontrol edin.")
                    return
                
                # Bugünden önceki bir tarih mi kontrol et
                if selected_date < today:
                    error_label.config(text="Geçmiş bir tarih seçemezsiniz!")
                    return
                
                # Tarihi veritabanına kaydet
                if hasattr(self, 'conn') and hasattr(self, 'cursor'):
                    try:
                        # user_settings tablosu var mı kontrol et
                        self.cursor.execute('''
                            CREATE TABLE IF NOT EXISTS user_settings (
                                user_id INTEGER PRIMARY KEY,
                                exam_date TEXT
                            )
                        ''')
                        
                        # Kullanıcının ayarı var mı kontrol et
                        self.cursor.execute('''
                            SELECT * FROM user_settings WHERE user_id = ?
                        ''', (self.current_user.get('id', 0),))
                        
                        if self.cursor.fetchone():
                            # Güncelle
                            self.cursor.execute('''
                                UPDATE user_settings SET exam_date = ? WHERE user_id = ?
                            ''', (selected_date.strftime("%Y-%m-%d"), self.current_user.get('id', 0)))
                        else:
                            # Yeni kayıt ekle
                            self.cursor.execute('''
                                INSERT INTO user_settings (user_id, exam_date) VALUES (?, ?)
                            ''', (self.current_user.get('id', 0), selected_date.strftime("%Y-%m-%d")))
                        
                        self.conn.commit()
                    except Exception as e:
                        print(f"Veritabanı hatası: {e}")
                
                # Arayüzü güncelle
                days_left = (selected_date - datetime.datetime.now()).days
                date_label.config(text=f"Sınav Tarihi: {selected_date.strftime('%d.%m.%Y')}")
                days_label.config(text=f"Kalan Süre: {days_left} gün")
                
                # Motivasyon mesajını güncelle
                if days_left <= 7:
                    motivation = "Son düzlüktesin! Şimdi daha çok çalışma zamanı!"
                elif days_left <= 14:
                    motivation = "İki haftadan az kaldı! Eksiklerini tamamla."
                else:
                    motivation = "Düzenli çalışarak başarıya ulaşabilirsin!"
                
                motivation_label.config(text=motivation)
                
                # Pencereyi kapat
                date_window.destroy()
                
            except Exception as e:
                error_label.config(text=f"Hata oluştu: {e}")
        
        save_btn = tk.Button(
            date_window, 
            text="Tarihi Kaydet", 
            command=save_date,
            font=("Arial", 12, "bold"), 
            bg="#e74c3c", 
            fg="white", 
            relief="flat",
            height=2,
            width=15
        )
        save_btn.pack(pady=20)
        
        # İptal butonu
        cancel_btn = tk.Button(
            date_window, 
            text="İptal", 
            command=date_window.destroy,
            font=("Arial", 12), 
            bg="#ccc", 
            fg="#444", 
            relief="flat"
        )
        cancel_btn.pack()

def main():
    root = tk.Tk()
    app = EhliyetGoApp(root)
    root.mainloop()

if __name__ == "__main__":
    main() 
